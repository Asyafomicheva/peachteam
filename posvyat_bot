import telebot
from telebot import types
import json
from datetime import datetime
import pytz
API_TOKEN = '' 

bot = telebot.TeleBot(API_TOKEN)

data={}
university={}
vip_client=False
for_who = ""
for_where = ""

text_oplata = "Привет, дорогой друг! Тут ты можешь получить путевку в наш Лагерь. Стоить она будет *3800₽*\n\nВАЖНО: При покупке билета обязательно укажи свое *ФИО целиком* в сообщении к переводу.\n\nТИНЬКОФФ:\n'''5536 9141 2735 8780'''\n\nСБЕР:\n'''4276 3801 8332 1996'''\n\nПо номеру телефона:\n'''+7 (916) 342-73-92'''\nИлья Дмитриевич Ш.\n\n*ПОСЛЕ СОВЕРШЕНИЯ ОПЛАТЫ*\n\nПожалуйста, напиши свое *ФИО*\n\n_Пример: Иванов Иван Иваныч_\n\n_Если ты начал/а процесс регистрации, пожалуйста, пройди его до конца. Если после введения ФИО бот не дает  ответа - нажми заново /start_"


@bot.callback_query_handler(func=lambda call:True)
def callback_query(call):
    global for_who, for_where
    if call.data == 'menu_da':
        start(call)
    elif call.data == 'da':
        bot.edit_message_text(chat_id=call.message.chat.id,  message_id=call.message.message_id, text="_Проверка пройдена_", parse_mode="Markdown")
        priem_data(call)
    elif call.data == 'net':
        bot.edit_message_text(chat_id=call.message.chat.id,  message_id=call.message.message_id, text="_Изменяем данные..._", parse_mode="Markdown")
        vozvrat(call)
    elif call.data == 'bsc':
        bot.edit_message_text(chat_id=call.message.chat.id,  message_id=call.message.message_id, text="_Информация о том, что ты из БСЦ принята!_", parse_mode="Markdown")
        for_where = call.data
        choose_bsc(call)
    elif call.data == 'ВСН':
        bot.edit_message_text(chat_id=call.message.chat.id,  message_id=call.message.message_id, text="_Информация о том, что ты из ВСН принята!_", parse_mode="Markdown")
        for_where = call.data
        buy_bilet_group_proverka(call)
    elif call.data == 'БСЦ241':
        bot.edit_message_text(chat_id=call.message.chat.id,  message_id=call.message.message_id, text="_Информация о том, что ты из 1 группы принята!_", parse_mode="Markdown")
        for_where = call.data
        buy_bilet_group_proverka(call)
    elif call.data == 'БСЦ242':
        bot.edit_message_text(chat_id=call.message.chat.id,  message_id=call.message.message_id, text="_Информация о том, что ты из 2 группы принята!_", parse_mode="Markdown")
        for_where = call.data
        buy_bilet_group_proverka(call)
    elif call.data == 'БСЦ243':
        bot.edit_message_text(chat_id=call.message.chat.id,  message_id=call.message.message_id, text="_Информация о том, что ты из 3 группы принята!_", parse_mode="Markdown")
        for_where = call.data
        buy_bilet_group_proverka(call)
    elif call.data == 'БСЦ244':
        bot.edit_message_text(chat_id=call.message.chat.id,  message_id=call.message.message_id, text="_Информация о том, что ты c из группы принята!_", parse_mode="Markdown")
        for_where = call.data
        buy_bilet_group_proverka(call)
    elif call.data == 'БСЦ245':
        bot.edit_message_text(chat_id=call.message.chat.id,  message_id=call.message.message_id, text="_Информация о том, что ты из 5 группы принята!_", parse_mode="Markdown")
        for_where = call.data
        buy_bilet_group_proverka(call)
    elif call.data == 'БСЦ246':
        bot.edit_message_text(chat_id=call.message.chat.id,  message_id=call.message.message_id, text="_Информация о том, что ты из 6 группы принята!_", parse_mode="Markdown")
        for_where = call.data
        buy_bilet_group_proverka(call)


    elif call.data == 'bsc_kostyl':
        bot.edit_message_text(chat_id=call.message.chat.id,  message_id=call.message.message_id, text="_Информация о том, что ты из БСЦ!_", parse_mode="Markdown")
        for_where = call.data
        razvodka_change_bsc(call)
    elif call.data == 'vsn_kostyl':
        bot.edit_message_text(chat_id=call.message.chat.id,  message_id=call.message.message_id, text="_Информация о том, что ты из ВСН!_", parse_mode="Markdown")
        for_where = call.data
        buy_bilet_group_proverka1(call)
    elif call.data == 'menu_oplata':
        start(call)
    elif call.data == 'menu_info':
        bot.edit_message_text(chat_id=call.message.chat.id,  message_id=call.message.message_id, text="Переходим в главное меню...", parse_mode="Markdown")
        start(call)
    elif call.data == 'bilet':
        bot.edit_message_text(chat_id=call.message.chat.id,  message_id=call.message.message_id, text="Ты сможешь вернуться в главное меню после окончания регистрации!")
        buy_bilet(call)
    elif call.data == 'oplata':
        check_oplata(call)
    elif call.data =='info':
        bot.edit_message_text(chat_id=call.message.chat.id,  message_id=call.message.message_id, text="Ты сможешь вернуться в главное меню после прочтения!")
        get_info(call)
    elif call.data =='change_data':
        bot.edit_message_text(chat_id=call.message.chat.id,  message_id=call.message.message_id, text="Ты сможешь вернуться в главное меню после окончания изменений!")
        change_fio_kostyl(call)
    elif call.data =='change_fio':
        bot.edit_message_text(chat_id=call.message.chat.id,  message_id=call.message.message_id, text="_Производятся изменения..._", parse_mode="Markdown")
        change_fio_kostyl(call)
    elif call.data =='change_group':
        bot.edit_message_text(chat_id=call.message.chat.id,  message_id=call.message.message_id, text="_Производятся изменения..._", parse_mode="Markdown")
        buy_bilet_data_kostyl(call)
    elif call.data == 'menu_osninfo':
        bot.edit_message_text(chat_id=call.message.chat.id,  message_id=call.message.message_id, text="Загружаем информацию...", parse_mode="Markdown")
        menu_osninfo(call)
    elif call.data == 'menu__checklist_page':
        bot.edit_message_text(chat_id=call.message.chat.id,  message_id=call.message.message_id, text="Загружаем информацию...", parse_mode="Markdown")
        menu_checklist(call)
    elif call.data == 'menu_pravila':
        bot.edit_message_text(chat_id=call.message.chat.id,  message_id=call.message.message_id, text="Загружаем информацию...", parse_mode="Markdown")
        #with open('/bot/guest_page.json', 'r') as f:
        #    user_stat = json.load(f)
        #chat_id_2 = call.message.chat.id
        #if str(chat_id_2) not in user_stat:
        #    user_stat[str(chat_id_2)] = {"page_bar": 1, "page_rules": 1}
        #    with open('/bot/guest_page.json', 'w') as f:
        #        json.dump(user_stat, f)
        menu_pravila(call)
    elif call.data == 'menu_bar':
        bot.edit_message_text(chat_id=call.message.chat.id,  message_id=call.message.message_id, text="Загружаем информацию...", parse_mode="Markdown")
        #with open('guest_page.json', 'r') as f:
        #    user_stat = json.load(f)
        #chat_id_2 = call.message.chat.id
        #if str(chat_id_2) not in user_stat:
        #    user_stat[str(chat_id_2)] = {"page_bar": 1, "page_rules": 1}
        #    with open('guest_page.json', 'w') as f:
        #        json.dump(user_stat, f)
        #menu_bar(chat_id_2, user_stat)
        menu_bar(call)
    elif call.data == 'menu_loft':
        menu_loft(call)
    elif call.data in ['prev_page_pr','next_page_pr']:
        bot.delete_message(call.message.chat.id, call.message.message_id)
        count = len(rules_dict)
        with open('/bot/guest_page.json', 'r') as f:
            user_stat = json.load(f)
        chat_id_2 = call.message.chat.id
        page = user_stat[str(chat_id_2)]["page_rules"]
        if call.data == 'prev_page_pr':
            page = page - 1 if page > 1 else count
        elif call.data == 'next_page_pr':
            page = page + 1 if page < count else 1
        user_stat[str(chat_id_2)]["page_rules"] = page
        with open('/bot/guest_page.json', 'w') as of:
            json.dump(user_stat, of)
        menu_pravila(chat_id_2, user_stat)
    elif call.data in ['prev_page_bar','next_page_bar']:
        bot.delete_message(call.message.chat.id, call.message.message_id)
        count = len(bar_dict)
        with open('/bot/guest_page.json', 'r') as f:
            user_stat = json.load(f)
        chat_id_2 = call.message.chat.id
        page = user_stat[str(chat_id_2)]["page_bar"]
        if call.data == 'prev_page_bar':
            page = page - 1 if page > 1 else count
        elif call.data == 'next_page_bar':
            page = page + 1 if page < count else 1
        user_stat[str(chat_id_2)]["page_bar"] = page
        with open('/bot/guest_page.json', 'w') as of:
            json.dump(user_stat, of)
        menu_bar(chat_id_2, user_stat)
    elif call.data =='menu_tg':
        with open('/bot/rassel.json', 'r') as f:
            rassel = json.load(f)
        if call.message.from_user.username in rassel:
            number = rassel[call.message.from_user.username]
            sozh = []
            for i in rassel[number]:
                if i != call.message.from_user.username:
                    sozh.append(i)
            bot.edit_message_text(chat_id=call.message.chat.id,  message_id=call.message.message_id, text=f"Твои сожители: {sozh}", parse_mode="Markdown")
        else:
            bot.edit_message_text(chat_id=call.message.chat.id,  message_id=call.message.message_id, text=f"Ты не живешь", parse_mode="Markdown")


def menu_checklist(message):
    keyboard = types.InlineKeyboardMarkup()
    btn_menu_bar = types.InlineKeyboardButton(text='Карта местности', callback_data='menu_bar')
    btn_menu_osninfo = types.InlineKeyboardButton(text='Место проведения', callback_data='menu_osninfo')
    btn_menu_tg = types.InlineKeyboardButton(text='ТГ сожителей', callback_data='menu_tg')
    btn_menu = types.InlineKeyboardButton(text='Главное меню', callback_data='menu_info')
    keyboard.add(btn_menu, btn_menu_bar, btn_menu_osninfo, btn_menu_tg)

    media_group = [
        types.InputMediaPhoto(open('/bot/pic1.PNG', 'rb')),
        types.InputMediaPhoto(open('/bot/pic2.PNG', 'rb')),
        types.InputMediaPhoto(open('/bot/pic3.PNG', 'rb')),
        types.InputMediaPhoto(open('/bot/pic4.PNG', 'rb')),
        types.InputMediaPhoto(open('/bot/pic5.PNG', 'rb')),
        types.InputMediaPhoto(open('/bot/pic6.PNG', 'rb'))
    ]

    bot.send_media_group(message.from_user.id, media=media_group)

    bot.send_message(message.from_user.id, "Выберите опцию:", reply_markup=keyboard)


def menu_loft(message):
    #чеклист
    pagination = types.InlineKeyboardMarkup()
    # добавляю кнопочки
    btn_menu_bar = types.InlineKeyboardButton('Барная карта', callback_data='menu_bar')
    btn_menu = types.InlineKeyboardButton(text='Главное меню', callback_data='menu_info')
    btn_menu_osninfo = types.InlineKeyboardButton(text='Основная инфа', callback_data='menu_osninfo')
    btn_menu_pravila = types.InlineKeyboardButton(text='Правила', callback_data='menu_pravila')
    pagination.add(btn_menu_bar, btn_menu_osninfo,  btn_menu, btn_menu_pravila)
    bot.send_photo(message.from_user.id, photo=open(loft, 'rb'), caption="План лофта",
                   reply_markup=pagination)


def menu_bar(message):
    pagination = types.InlineKeyboardMarkup()
    #page = user_stat[str(chat_id_2)]["page_bar"]
    #count = len(bar_dict)
    #previous_button = types.InlineKeyboardButton('Назад', callback_data='prev_page_bar')
    #next_button = types.InlineKeyboardButton('Вперед', callback_data='next_page_bar')
    btn_menu_osninfo = types.InlineKeyboardButton(text='Место проведения', callback_data='menu_osninfo')
    btn_menu = types.InlineKeyboardButton(text='Главное меню', callback_data='menu_info', row_width=1)
    btn_menu_pravila = types.InlineKeyboardButton(text='Расписание', callback_data='menu_pravila')
    btn_checklist = types.InlineKeyboardButton(text='Чек-лист', callback_data='menu__checklist_page')
    btn_menu_tg = types.InlineKeyboardButton(text='ТГ сожителей', callback_data='menu_tg')
    #btn_menu_lf = types.InlineKeyboardButton(text='Схема лофта', callback_data='menu_loft')
    #btn_menu_pravila = types.InlineKeyboardButton(text='Правила', callback_data='menu_pravila')
    #pagination.add(previous_button, btn_menu, next_button, btn_menu_osninfo, btn_menu_lf, btn_menu_pravila)
    #bot.send_photo(chat_id_2, photo=open(bar_dict[page - 1], 'rb'), caption=f"Страница {page} из {count}",
    #               reply_markup=pagination)
    pagination.add(btn_menu_pravila, btn_menu_osninfo)
    pagination.add(btn_menu, btn_checklist, btn_menu_tg)
     # Создаем медиа-группу
    media_group = [
        types.InputMediaPhoto(open('/bot/карта 1.png', 'rb')),
        types.InputMediaPhoto(open('/bot/карта 2.png', 'rb')),
    ]
    
    # Отправляем медиа-группу пользователю
    bot.send_media_group(message.from_user.id, media=media_group)
    
    # Отправляем отдельное сообщение с клавиатурой
    bot.send_message(message.from_user.id, text="Выберите необходимую информацию:", reply_markup=pagination)
    
    

    

def menu_pravila(message):
    #таймлайн
    keyboard = types.InlineKeyboardMarkup()
    #page = user_stat[str(chat_id_2)]["page_rules"]
    #count = len(rules_dict)
    # добавляю кнопочки
    #previous_button = types.InlineKeyboardButton('Назад', callback_data='prev_page_pr')
    #next_button = types.InlineKeyboardButton('Вперед', callback_data='next_page_pr')
    btn_menu_osninfo = types.InlineKeyboardButton(text='Место проведения', callback_data='menu_osninfo')
    btn_menu_bar = types.InlineKeyboardButton(text='Карта местности', callback_data='menu_bar')
    btn_menu = types.InlineKeyboardButton(text='Главное меню', callback_data='menu_oplata')
    btn_checklist = types.InlineKeyboardButton(text='Чек-лист', callback_data='menu__checklist_page')
    btn_menu_tg = types.InlineKeyboardButton(text='ТГ сожителей', callback_data='menu_tg')
    photo = open('/bot/timeline.png', 'rb')
    keyboard.add(btn_menu_osninfo, btn_menu_bar, btn_menu_tg)
    
    keyboard.add(btn_menu, btn_checklist)
    bot.send_photo(message.from_user.id, photo)
    
    # Отправляем отдельное сообщение с клавиатурой
    bot.send_message(message.from_user.id, text="Выберите необходимую информацию:", reply_markup=keyboard)

def get_info(message):
    #основная информацияя
    keyboard = types.InlineKeyboardMarkup()
    btn_menu_osninfo = types.InlineKeyboardButton(text='Место проведения', callback_data='menu_osninfo')
    btn_menu_pravila = types.InlineKeyboardButton(text='Расписание', callback_data='menu_pravila')
    btn_menu_bar = types.InlineKeyboardButton(text='Карта местности', callback_data='menu_bar')
    btn_checklist = types.InlineKeyboardButton(text='Чек-лист', callback_data='menu__checklist_page')
    btn_menu_tg = types.InlineKeyboardButton(text='ТГ сожителей', callback_data='menu_tg')
    #btn_menu_lf = types.InlineKeyboardButton(text='Схема лофта', callback_data='menu_loft')
    #btn_menu = types.InlineKeyboardButton(text='Главное меню', callback_data='menu_info')
    btn_menu = types.InlineKeyboardButton(text='Главное меню', callback_data='menu_oplata')
    keyboard.add(btn_menu_osninfo, btn_menu_bar, btn_menu_pravila)
    keyboard.add(btn_menu, btn_checklist, btn_menu_tg)
    bot.send_message(message.from_user.id,
                      text="Выберите необходимую информацию", 
                      reply_markup=keyboard)




def menu_osninfo(message):
    #место проведенеия
    keyboard = types.InlineKeyboardMarkup()
    # Создаем кнопки
    btn_menu_bar = types.InlineKeyboardButton(text='Карта местности', callback_data='menu_bar')
    btn_menu = types.InlineKeyboardButton(text='Главное меню', callback_data='menu_info')
    btn_menu_pravila = types.InlineKeyboardButton(text='Расписание', callback_data='menu_pravila')
    btn_checklist = types.InlineKeyboardButton(text='Чек-лист', callback_data='menu__checklist_page')
    btn_menu_tg = types.InlineKeyboardButton(text='ТГ сожителей', callback_data='menu_tg')
    # Добавляем кнопки в клавиатуру
    keyboard.add(btn_menu_pravila, btn_menu_bar, btn_menu_tg)
    keyboard.add(btn_menu, btn_checklist)
    
    # Создаем медиа-группу
    media_group = [
        types.InputMediaPhoto(open('/bot/1.jpg', 'rb')),
        types.InputMediaPhoto(open('/bot/2.jpg', 'rb')),
        types.InputMediaPhoto(open('/bot/3.jpg', 'rb')),
        types.InputMediaPhoto(open('/bot/4.jpg', 'rb'))
    ]
    
    # Отправляем медиа-группу пользователю
    bot.send_media_group(message.from_user.id, media=media_group)
    
    # Отправляем отдельное сообщение с клавиатурой
    bot.send_message(message.from_user.id, text="Выберите необходимую информацию:", reply_markup=keyboard)





def razvodka_change_from_who(message):
    with open('/bot/guests_posvat.json', 'r', encoding='UTF-8') as f:
        file_read = f.read()
        if file_read != '':
            words = json.loads(file_read)
        else:
            words = dict()
    if message.from_user.username in words:
        global data, kostyl,university,for_who, from_where
        try:
            data_list = str(data[message.from_user.id]).split() + ['-', '-', '-']
            with open('/bot/guests_posvat.json', 'r', encoding='UTF-8') as f:
                file_read = f.read()
                if file_read != '':
                    words = json.loads(file_read)
                else:
                    words = dict()
                old_datetime = words[message.from_user.username][7]
                words[message.from_user.username] = [message.from_user.id, data_list[0], data_list[1], data_list[2], for_where, old_datetime]
            with open('/bot/guests_posvat.json', 'w', encoding='UTF-8') as f:
                json.dump(words, f)
                print(words[message.from_user.username])
        except KeyError:
            pass
        keyboard = types.InlineKeyboardMarkup()
        btn_menu = types.InlineKeyboardButton(text='Вернуться в главное меню', callback_data='menu_da')
        keyboard.add(btn_menu)
        bot.send_message(message.from_user.id,
                         text='Информация изменена успешно!', reply_markup=keyboard)


    elif message.from_user.username not in words:
        buy_bilet_group_proverka(message)



def vozvrat(message):
    data[message.from_user.id]=""
    university[message.from_user.id]=""
    msg = bot.send_message(message.from_user.id, 'Введи свои данные заново')
    bot.register_next_step_handler(msg, buy_bilet_data)

def priem_data(message):
    global data, kostyl,university,for_who, from_where
    try:
        data_list = str(data[message.from_user.id]).split() + ['-', '-', '-']
        tz=pytz.timezone('Europe/Moscow')
        current_datetime = datetime.now(tz).isoformat(sep='T', timespec='seconds')
        with open('/bot/guests_posvat.json', 'r', encoding='UTF-8') as f:
            file_read = f.read()
            if file_read != '':
                words = json.loads(file_read)
            else:
                words = dict()
        if message.from_user.username in words and data_list[:3] != ['0', '-', '-']:
            old_datetime = words[message.from_user.username][5]
            words[message.from_user.username] = [message.from_user.id, data_list[0], data_list[1], data_list[2], for_where, old_datetime]
        elif message.from_user.username not in words:
            words[message.from_user.username] = [message.from_user.id, data_list[0], data_list[1], data_list[2], for_where, current_datetime]
    #words[message.from_user.username] = [message.from_user.id, data_list[0], data_list[1], data_list[2], group[message.from_user.id]]
        with open('/bot/guests_posvat.json', 'w', encoding='UTF-8') as f:
            json.dump(words, f)
            print(words[message.from_user.username])
    except KeyError:
        pass

    keyboard = types.InlineKeyboardMarkup()
    btn_menu = types.InlineKeyboardButton(text='Вернуться в главное меню', callback_data='menu_da')
    keyboard.add(btn_menu)
    bot.send_message(message.from_user.id,
                         text='Поздравляем! Путевка оформлена на твое имя!\n\nНа данном этапе ты можешь вернуться в главное меню.', reply_markup=keyboard)


def change_fio_kostyl(message):
    a = bot.send_message(message.from_user.id,text='Введи свое ФИО заново')
    bot.register_next_step_handler(a, change_fio)

def change_university_kostyl(message):
    a = bot.send_message(message.from_user.id,text='Введи свою группу заново')
    bot.register_next_step_handler(a, change_university)



#def change_fio(message): #Проверка на тип данных str
    #global data, kostyl,university,for_who, from_where
    #if isinstance(message.text, str):
        #try:
            #data[message.from_user.id] = message.text

            #if len(message.text.split())<3:

                #for i in range(3-len(message.text.split())):
                    #data[message.from_user.id]+=" -"
            #data_list = str(data[message.from_user.id]).split() + ['-', '-', '-']
            #with open('/home/romanloqi/code/guests_posvat.json', 'r', encoding='UTF-8') as f:
                #file_read = f.read()
                #if file_read != '':
                    #words = json.loads(file_read)
                #else:
                    #words = dict()
                #old_datetime = words[message.from_user.username][5]
                #words[message.from_user.username] = [message.from_user.id, data_list[0], data_list[1], data_list[2], for_where, old_datetime]
            #with open('/home/romanloqi/code/guests_posvat.json', 'w', encoding='UTF-8') as f:
                #json.dump(words, f)
                #print(words[message.from_user.username])

        #except KeyError:
            #pass
        #keyboard = types.InlineKeyboardMarkup()
        #btn_menu = types.InlineKeyboardButton(text='Вернуться в главное меню', callback_data='menu_da')
        #keyboard.add(btn_menu)
        #bot.send_message(message.from_user.id,
                         #text='Твое ФИО изменено успешно!', reply_markup=keyboard)

    #else:
        #a = bot.send_message(message.from_user.id, text="Пожалуйста, введите корректные данные :)", parse_mode="Markdown") #Можешь изменить текст, который будет присылаться юзеру при ошибочном вводе
        #bot.register_next_step_handler(a, change_fio)

def change_fio(message):
    if isinstance(message.text, str): #Проверка на тип данных str
        global data
        data[message.from_user.id] = message.text

        if len(message.text.split())<3:

            for i in range(3-len(message.text.split())):
                data[message.from_user.id]+=" -"
    keyboard = types.InlineKeyboardMarkup()
    btn_bsc = types.InlineKeyboardButton(text='БСЦ', callback_data='bsc',one_time_keyboard=True)
    keyboard.add(btn_bsc)
    btn_vsn = types.InlineKeyboardButton(text='ВСН', callback_data='ВСН',one_time_keyboard=True)
    keyboard.add(btn_vsn)
    msg = bot.send_message(message.from_user.id,
                            text='Укажи свою группу', reply_markup=keyboard)

def change_another(message):
    keyboard = types.InlineKeyboardMarkup()
    btn_menu = types.InlineKeyboardButton(text='Вернуться в главное меню', callback_data='menu_da')
    keyboard.add(btn_menu)
    bot.send_message(message.from_user.id,
                         text='Информация изменена успешно!', reply_markup=keyboard)



def buy_bilet_group_proverka(message):

    keyboard = types.InlineKeyboardMarkup()
    btn_da = types.InlineKeyboardButton(text='Да', callback_data='da', one_time_keyboard=True)
    keyboard.add(btn_da)
    btn_net = types.InlineKeyboardButton(text='Нет', callback_data='net',one_time_keyboard=True)
    keyboard.add(btn_net)
    bot.send_message(message.from_user.id,
                            text='Спасибо! А теперь проверь, всё ли введено верно: Ты — ' + data[message.from_user.id] + ' обучаешься в группе ' + for_where + '?' ' Нажми «да», если все верно, и «нет» — если нужно перезаписать данные.\n\n*ВАЖНО — НЕ ЗАБУДЬ НАЖАТЬ НА КНОПКУ «ДА» ЕСЛИ ВСЕ ВЕРНО*, иначе твои данные не будут записаны.', reply_markup=keyboard, parse_mode="Markdown")


def buy_bilet_group_proverka1(message):
    global data, from_where
    with open('/bot/guests_posvat.json', 'r', encoding='UTF-8') as f:
        file_read = f.read()
        if file_read != '':
            words = json.loads(file_read)
        else:
            words = dict()
    if message.from_user.username in words:
        try:
            data_list = str(data[message.from_user.id]).split() + ['-', '-', '-']
            with open('/bot/guests_posvat.json', 'r', encoding='UTF-8') as f:
                file_read = f.read()
                if file_read != '':
                    words = json.loads(file_read)
                else:
                    words = dict()
                old_datetime = words[message.from_user.username][7]
                words[message.from_user.username] = [message.from_user.id, data_list[0], data_list[1], data_list[2], for_where, old_datetime]
            with open('/bot/guests_posvat.json', 'w', encoding='UTF-8') as f:
                json.dump(words, f)
                print(words[message.from_user.username])
        except KeyError:
            pass
    keyboard = types.InlineKeyboardMarkup()
    btn_menu = types.InlineKeyboardButton(text='Вернуться в главное меню', callback_data='menu_da')
    keyboard.add(btn_menu)
    bot.send_message(message.from_user.id,
                         text='Информация изменена успешно!', reply_markup=keyboard)

def buy_bilet_data(message):
    if isinstance(message.text, str): #Проверка на тип данных str
        global data
        data[message.from_user.id] = message.text

        if len(message.text.split())<3:

            for i in range(3-len(message.text.split())):
                data[message.from_user.id]+=" -"

        keyboard = types.InlineKeyboardMarkup()
        btn_bsc = types.InlineKeyboardButton(text='БСЦ', callback_data='bsc',one_time_keyboard=True)
        keyboard.add(btn_bsc)
        btn_vsn = types.InlineKeyboardButton(text='ВСН', callback_data='ВСН',one_time_keyboard=True)
        keyboard.add(btn_vsn)
        msg = bot.send_message(message.from_user.id,
                            text='Укажи свою группу', reply_markup=keyboard)
    else:
        a = bot.send_message(message.from_user.id, text="Пожалуйста, введите корректные данные :)", parse_mode="Markdown") #Можешь изменить текст, который будет присылаться юзеру при ошибочном вводе
        bot.register_next_step_handler(a, buy_bilet_data)

def buy_bilet_data_kostyl(message):
    keyboard = types.InlineKeyboardMarkup()
    btn_bsc = types.InlineKeyboardButton(text='БСЦ', callback_data='bsc_kostyl',one_time_keyboard=True)
    keyboard.add(btn_bsc)
    btn_vsn = types.InlineKeyboardButton(text='ВСН', callback_data='vsn_kostyl',one_time_keyboard=True)
    keyboard.add(btn_vsn)
    msg = bot.send_message(message.from_user.id,
                            text='Укажи свою группу', reply_markup=keyboard)
    bot.register_next_step_handler(msg, buy_bilet_group_proverka)

def choose_bsc(message):
    keyboard = types.InlineKeyboardMarkup()
    btn_bsc1 = types.InlineKeyboardButton(text='БСЦ241', callback_data='БСЦ241',one_time_keyboard=True)
    keyboard.add(btn_bsc1)
    btn_bsc2 = types.InlineKeyboardButton(text='БСЦ242', callback_data='БСЦ242',one_time_keyboard=True)
    keyboard.add(btn_bsc2)
    btn_bsc3 = types.InlineKeyboardButton(text='БСЦ243', callback_data='БСЦ243',one_time_keyboard=True)
    keyboard.add(btn_bsc3)
    btn_bsc4 = types.InlineKeyboardButton(text='БСЦ244', callback_data='БСЦ244',one_time_keyboard=True)
    keyboard.add(btn_bsc4)
    btn_bsc5 = types.InlineKeyboardButton(text='БСЦ245', callback_data='БСЦ245',one_time_keyboard=True)
    keyboard.add(btn_bsc5)
    btn_bsc6 = types.InlineKeyboardButton(text='БСЦ246', callback_data='БСЦ246',one_time_keyboard=True)
    keyboard.add(btn_bsc6)
    bot.send_message(message.from_user.id,
                            text='Укажи НОМЕР своей группы', reply_markup=keyboard)



def buy_bilet(message):
    a = bot.send_message(message.from_user.id, text=text_oplata, parse_mode="Markdown")
    bot.register_next_step_handler(a, buy_bilet_data)

def check_oplata(message):
    keyboard = types.InlineKeyboardMarkup()
    btn_menu = types.InlineKeyboardButton(text='Вернуться в главное меню', callback_data='menu_oplata')
    keyboard.add(btn_menu)
    with open('/bot/guests_valid.json', 'r', encoding='UTF-8') as f:
        valid_list = json.load(f)
    if message.from_user.username in valid_list.keys():
        valid_list[message.from_user.username] += 1
        parse_mode = 'Markdown'
        link = 'https://t.me/socposvyat2024'
        bot.send_message(message.from_user.id, 
                        text=f"Поздравляем, твоя путевка оформлена! Ждем тебя в нашем лагере 5-6 октября, следи за обновлениями в нашем [канале]({link}).",
                        parse_mode=parse_mode,
                        reply_markup=keyboard)        
        with open('/bot/guests_valid.json', 'w', encoding='UTF-8') as f:
            json.dump(valid_list, f)
    else:
        bot.send_message(message.from_user.id,
                            text="Ой! Кажется, духи перехватили твою оплату. Пожалуйста, напиши @roman_khamrin.", reply_markup=keyboard)
        print(message.from_user.username)



@bot.message_handler(commands=[ 'start' ])
def start(message):
    if isinstance(message, telebot.types.Message):
        with open('/bot/guest_page.json', 'r') as f:
            user_stat = json.load(f)
            user_stat[str(message.chat.id)] = {"page_bar": 1, "page_rules": 1}
            with open ('guest_page.json', 'w') as of:
                json.dump(user_stat, of)
    tz0 = pytz.timezone('Europe/Moscow')
    current_datetime0 = datetime.now(tz0).isoformat(sep='T', timespec='seconds')
    with open('/bot/guests_start_posvat.json', 'r', encoding='UTF-8') as f:
        file_read = f.read()
        if file_read != '':
            words = json.loads(file_read)
        else:
            words = dict()
    words[message.from_user.username] = [message.from_user.id, current_datetime0]
    with open('/bot/guests_start_posvat.json', 'w', encoding='UTF-8') as f:
        json.dump(words, f)
        print(words[message.from_user.username])
    with open('/bot/guests_posvat.json', 'r', encoding='UTF-8') as f:
        file_read = f.read()
        if file_read != '':
            words = json.loads(file_read)
        else:
            words = dict()
    if message.from_user.username in words:
        keyboard = types.InlineKeyboardMarkup()
        btn_reg = types.InlineKeyboardButton(text='Изменить данные', callback_data='change_data', one_time_keyboard=True)
        keyboard.add(btn_reg)
        btn_oplata = types.InlineKeyboardButton(text='Подтверждение оплаты', callback_data='oplata', one_time_keyboard=True)
        keyboard.add(btn_oplata)
        btn_info = types.InlineKeyboardButton(text='Информация о мероприятии', callback_data='info', one_time_keyboard=True)
        keyboard.add(btn_info)
        bot.send_message(message.from_user.id,
                         text=f"Добро пожаловать в меню для регистрации на посвящение социологов, {message.from_user.first_name}!\n\nВыбери информацию, которую желаешь узнать.".format(
                             message.from_user), reply_markup=keyboard)

    elif message.from_user.username not in words:
        keyboard = types.InlineKeyboardMarkup()
        btn_reg = types.InlineKeyboardButton(text='Купить билет', callback_data='bilet', one_time_keyboard=True)
        keyboard.add(btn_reg)
        btn_oplata = types.InlineKeyboardButton(text='Подтверждение оплаты', callback_data='oplata', one_time_keyboard=True)
        keyboard.add(btn_oplata)
        btn_info = types.InlineKeyboardButton(text='Информация о мероприятии', callback_data='info', one_time_keyboard=True)
        keyboard.add(btn_info)
        bot.send_message(message.from_user.id,
                         text=f"Добро пожаловать в меню для регистрации на посвящение социологов, {message.from_user.first_name}!\n\nВыбери информацию, которую желаешь узнать.\n\nКонтакты техподдержки в шапке бота!".format(
                             message.from_user), reply_markup=keyboard)






bot.polling(none_stop=True)
